// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\7\0\1\5\1\6\1\7\1\10\1\11\1\10\1\0"+
    "\1\12\1\13\11\14\1\0\1\15\1\0\1\16\3\0"+
    "\1\17\1\20\1\21\1\22\10\20\1\23\15\20\4\0"+
    "\1\20\1\0\1\24\1\20\1\25\1\26\1\27\1\30"+
    "\1\20\1\31\1\32\2\20\1\33\1\34\1\35\1\36"+
    "\1\37\1\20\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\20\1\46\1\47\1\0\1\50\7\0\1\3\73\0"+
    "\1\20\7\0\1\20\3\0\1\20\3\0\1\20\1\0"+
    "\1\20\6\0\1\20\1\0\1\20\4\0\1\20\7\0"+
    "\1\20\3\0\1\20\3\0\1\51\1\0\1\20\6\0"+
    "\1\20\1\0\1\20\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\10\1\11\16\1\1\12\1\13\1\0\1\2"+
    "\5\1\1\14\17\1\1\15\2\0\3\1\1\16\20\1"+
    "\1\17\2\1\1\0\1\2\4\1\1\20\13\1\1\21"+
    "\10\1\1\22\3\1\1\23\7\1\1\24\1\1\1\25"+
    "\3\1\1\26\25\1\1\27\1\30\26\1\1\31\6\1"+
    "\1\32\2\1\1\33\4\1\1\34\1\35\1\1\1\36"+
    "\6\1\1\37\2\1\1\40\2\1\1\41\4\1\1\42"+
    "\1\43\1\44\1\1\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\124\0\52\0\52\0\52\0\52"+
    "\0\176\0\250\0\52\0\52\0\322\0\374\0\u0126\0\u0150"+
    "\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0"+
    "\0\u02ca\0\u02f4\0\52\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\322\0\u046e\0\u0498\0\u04c2\0\u04ec"+
    "\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c"+
    "\0\u0666\0\u0690\0\u06ba\0\52\0\u06e4\0\u070e\0\u0738\0\u0762"+
    "\0\u078c\0\322\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888"+
    "\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8"+
    "\0\u0a02\0\u0a2c\0\322\0\u0a56\0\u0a80\0\u0aaa\0\u06e4\0\u0ad4"+
    "\0\u0afe\0\u0b28\0\u0b52\0\322\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa"+
    "\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\322"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70"+
    "\0\322\0\u0e9a\0\u0ec4\0\u0eee\0\322\0\u0f18\0\u0f42\0\u0f6c"+
    "\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\322\0\u103e\0\u1068\0\u1092"+
    "\0\u10bc\0\u10e6\0\322\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8"+
    "\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308"+
    "\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458"+
    "\0\322\0\322\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554"+
    "\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4"+
    "\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4"+
    "\0\322\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\322"+
    "\0\u191a\0\u1944\0\322\0\u196e\0\u1998\0\u19c2\0\u19ec\0\322"+
    "\0\322\0\u1a16\0\322\0\u1a40\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8"+
    "\0\u1b12\0\322\0\u1b3c\0\u1b66\0\322\0\u1b90\0\u1bba\0\322"+
    "\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\322\0\322\0\322\0\u1c8c"+
    "\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\2\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\7\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\15\1\23\1\24\1\15\1\25"+
    "\1\26\1\27\1\30\1\15\1\31\1\32\1\15\1\33"+
    "\1\34\1\15\54\0\1\3\56\0\1\35\2\0\1\36"+
    "\52\0\2\12\54\0\30\15\2\0\1\15\17\0\10\15"+
    "\1\37\17\15\2\0\1\15\17\0\22\15\1\40\5\15"+
    "\2\0\1\15\17\0\5\15\1\41\11\15\1\42\10\15"+
    "\2\0\1\15\17\0\17\15\1\43\10\15\2\0\1\15"+
    "\17\0\11\15\1\44\2\15\1\45\13\15\2\0\1\15"+
    "\17\0\5\15\1\46\22\15\2\0\1\15\17\0\17\15"+
    "\1\47\4\15\1\50\3\15\2\0\1\15\17\0\10\15"+
    "\1\51\10\15\1\52\6\15\2\0\1\15\17\0\10\15"+
    "\1\53\6\15\1\54\10\15\2\0\1\15\17\0\17\15"+
    "\1\55\10\15\2\0\1\15\17\0\5\15\1\56\5\15"+
    "\1\57\5\15\1\60\6\15\2\0\1\15\17\0\5\15"+
    "\1\61\2\15\1\62\17\15\2\0\1\15\17\0\12\15"+
    "\1\63\15\15\2\0\1\15\15\0\1\64\34\0\7\65"+
    "\1\66\42\65\2\36\1\3\1\36\1\4\45\36\17\0"+
    "\6\15\1\67\21\15\2\0\1\15\17\0\23\15\1\70"+
    "\4\15\2\0\1\15\17\0\14\15\1\71\13\15\2\0"+
    "\1\15\17\0\21\15\1\72\6\15\2\0\1\15\17\0"+
    "\21\15\1\73\6\15\2\0\1\15\17\0\24\15\1\74"+
    "\3\15\2\0\1\15\17\0\13\15\1\75\14\15\2\0"+
    "\1\76\17\0\6\15\1\77\21\15\2\0\1\15\17\0"+
    "\15\15\1\100\12\15\2\0\1\15\17\0\7\15\1\101"+
    "\20\15\2\0\1\15\17\0\10\15\1\102\2\15\1\103"+
    "\14\15\2\0\1\15\17\0\5\15\1\104\22\15\2\0"+
    "\1\15\17\0\23\15\1\105\4\15\2\0\1\15\17\0"+
    "\14\15\1\106\13\15\2\0\1\15\17\0\21\15\1\107"+
    "\6\15\2\0\1\15\17\0\10\15\1\110\7\15\1\111"+
    "\7\15\2\0\1\15\17\0\24\15\1\112\3\15\2\0"+
    "\1\15\17\0\21\15\1\113\6\15\2\0\1\15\17\0"+
    "\21\15\1\114\6\15\2\0\1\15\17\0\13\15\1\115"+
    "\14\15\2\0\1\15\7\65\1\116\51\65\1\116\2\65"+
    "\1\117\37\65\17\0\14\15\1\120\13\15\2\0\1\15"+
    "\17\0\5\15\1\121\22\15\2\0\1\15\17\0\22\15"+
    "\1\112\5\15\2\0\1\15\17\0\5\15\1\122\22\15"+
    "\2\0\1\15\17\0\15\15\1\123\12\15\2\0\1\15"+
    "\17\0\16\15\1\124\11\15\2\0\1\15\17\0\5\15"+
    "\1\125\22\15\2\0\1\15\17\0\12\15\1\126\15\15"+
    "\2\0\1\15\17\0\10\15\1\127\17\15\2\0\1\15"+
    "\17\0\13\15\1\130\14\15\2\0\1\15\17\0\20\15"+
    "\1\131\7\15\2\0\1\15\17\0\16\15\1\132\11\15"+
    "\2\0\1\15\17\0\14\15\1\133\13\15\2\0\1\15"+
    "\17\0\5\15\1\134\22\15\2\0\1\15\17\0\13\15"+
    "\1\135\14\15\2\0\1\15\17\0\7\15\1\126\20\15"+
    "\2\0\1\15\17\0\15\15\1\136\12\15\2\0\1\15"+
    "\17\0\17\15\1\137\10\15\2\0\1\15\17\0\10\15"+
    "\1\140\17\15\2\0\1\15\17\0\15\15\1\141\1\15"+
    "\1\142\10\15\2\0\1\15\17\0\14\15\1\143\13\15"+
    "\2\0\1\15\7\65\1\116\2\65\1\3\37\65\17\0"+
    "\5\15\1\144\22\15\2\0\1\15\17\0\7\15\1\145"+
    "\20\15\2\0\1\15\17\0\3\15\1\146\24\15\2\0"+
    "\1\15\17\0\13\15\1\147\14\15\2\0\1\15\17\0"+
    "\16\15\1\150\11\15\2\0\1\15\17\0\10\15\1\151"+
    "\17\15\2\0\1\15\17\0\21\15\1\152\6\15\2\0"+
    "\1\15\17\0\7\15\1\153\20\15\2\0\1\15\17\0"+
    "\5\15\1\154\22\15\2\0\1\15\17\0\23\15\1\155"+
    "\4\15\2\0\1\15\17\0\13\15\1\156\14\15\2\0"+
    "\1\15\17\0\21\15\1\157\6\15\2\0\1\15\17\0"+
    "\6\15\1\160\21\15\2\0\1\15\17\0\20\15\1\161"+
    "\7\15\2\0\1\15\17\0\2\15\1\162\25\15\2\0"+
    "\1\15\17\0\10\15\1\163\17\15\2\0\1\15\17\0"+
    "\11\15\1\164\16\15\2\0\1\15\17\0\10\15\1\165"+
    "\17\15\2\0\1\15\17\0\21\15\1\166\6\15\2\0"+
    "\1\15\17\0\17\15\1\167\10\15\2\0\1\15\17\0"+
    "\10\15\1\170\17\15\2\0\1\15\17\0\16\15\1\171"+
    "\11\15\2\0\1\15\17\0\5\15\1\151\22\15\2\0"+
    "\1\15\17\0\17\15\1\172\10\15\2\0\1\15\17\0"+
    "\17\15\1\173\10\15\2\0\1\15\17\0\21\15\1\174"+
    "\6\15\2\0\1\15\17\0\27\15\1\175\2\0\1\15"+
    "\17\0\15\15\1\176\12\15\2\0\1\15\17\0\13\15"+
    "\1\177\14\15\2\0\1\15\17\0\17\15\1\200\10\15"+
    "\2\0\1\15\17\0\17\15\1\201\10\15\2\0\1\15"+
    "\17\0\16\15\1\202\3\15\1\203\5\15\2\0\1\15"+
    "\17\0\10\15\1\204\17\15\2\0\1\15\17\0\5\15"+
    "\1\205\22\15\2\0\1\15\17\0\15\15\1\206\12\15"+
    "\2\0\1\15\17\0\14\15\1\207\13\15\2\0\1\15"+
    "\17\0\5\15\1\210\22\15\2\0\1\15\17\0\1\211"+
    "\3\15\1\212\23\15\2\0\1\15\17\0\5\15\1\213"+
    "\22\15\2\0\1\15\17\0\5\15\1\214\22\15\2\0"+
    "\1\15\17\0\10\15\1\215\17\15\2\0\1\15\17\0"+
    "\23\15\1\216\4\15\2\0\1\15\17\0\20\15\1\217"+
    "\7\15\2\0\1\15\17\0\15\15\1\220\12\15\2\0"+
    "\1\15\17\0\24\15\1\221\3\15\2\0\1\15\17\0"+
    "\5\15\1\222\22\15\2\0\1\15\17\0\21\15\1\223"+
    "\6\15\2\0\1\15\17\0\21\15\1\224\6\15\2\0"+
    "\1\15\17\0\10\15\1\225\17\15\2\0\1\15\17\0"+
    "\3\15\1\226\24\15\2\0\1\15\17\0\21\15\1\227"+
    "\6\15\2\0\1\15\17\0\22\15\1\230\5\15\2\0"+
    "\1\15\17\0\10\15\1\231\17\15\2\0\1\15\17\0"+
    "\21\15\1\232\6\15\2\0\1\15\17\0\21\15\1\233"+
    "\6\15\2\0\1\15\17\0\16\15\1\234\11\15\2\0"+
    "\1\15\17\0\5\15\1\235\22\15\2\0\1\15\17\0"+
    "\10\15\1\236\17\15\2\0\1\15\17\0\13\15\1\237"+
    "\14\15\2\0\1\15\17\0\23\15\1\240\4\15\2\0"+
    "\1\15\17\0\15\15\1\241\12\15\2\0\1\15\17\0"+
    "\22\15\1\242\5\15\2\0\1\15\17\0\13\15\1\243"+
    "\14\15\2\0\1\15\17\0\6\15\1\244\21\15\2\0"+
    "\1\15\17\0\13\15\1\245\14\15\2\0\1\15\17\0"+
    "\22\15\1\246\5\15\2\0\1\15\17\0\15\15\1\247"+
    "\12\15\2\0\1\15\17\0\20\15\1\250\7\15\2\0"+
    "\1\15\17\0\24\15\1\251\3\15\2\0\1\15\17\0"+
    "\21\15\1\252\6\15\2\0\1\15\17\0\7\15\1\253"+
    "\20\15\2\0\1\15\17\0\7\15\1\254\20\15\2\0"+
    "\1\15\17\0\5\15\1\255\22\15\2\0\1\15\17\0"+
    "\10\15\1\256\17\15\2\0\1\15\17\0\5\15\1\257"+
    "\22\15\2\0\1\15\17\0\5\15\1\260\22\15\2\0"+
    "\1\15\17\0\5\15\1\261\22\15\2\0\1\15\17\0"+
    "\10\15\1\262\17\15\2\0\1\15\17\0\5\15\1\263"+
    "\22\15\2\0\1\15\17\0\10\15\1\264\17\15\2\0"+
    "\1\15\17\0\10\15\1\265\17\15\2\0\1\15\17\0"+
    "\15\15\1\266\12\15\2\0\1\15\17\0\13\15\1\267"+
    "\14\15\2\0\1\15\17\0\5\15\1\270\22\15\2\0"+
    "\1\15\17\0\22\15\1\271\5\15\2\0\1\15\17\0"+
    "\16\15\1\272\11\15\2\0\1\15\17\0\22\15\1\273"+
    "\5\15\2\0\1\15\17\0\15\15\1\274\12\15\2\0"+
    "\1\15\17\0\16\15\1\275\11\15\2\0\1\15\17\0"+
    "\22\15\1\276\5\15\2\0\1\15\17\0\7\15\1\277"+
    "\20\15\2\0\1\15\17\0\10\15\1\300\17\15\2\0"+
    "\1\15\17\0\7\15\1\301\20\15\2\0\1\15\17\0"+
    "\24\15\1\302\3\15\2\0\1\15\17\0\13\15\1\303"+
    "\14\15\2\0\1\15\17\0\23\15\1\304\4\15\2\0"+
    "\1\15\17\0\5\15\1\305\22\15\2\0\1\15\17\0"+
    "\13\15\1\306\14\15\2\0\1\15\17\0\22\15\1\307"+
    "\5\15\2\0\1\15\17\0\17\15\1\310\10\15\2\0"+
    "\1\15\17\0\16\15\1\311\11\15\2\0\1\15\17\0"+
    "\17\15\1\312\10\15\2\0\1\15\17\0\7\15\1\313"+
    "\20\15\2\0\1\15\17\0\10\15\1\314\17\15\2\0"+
    "\1\15\17\0\17\15\1\315\10\15\2\0\1\15\17\0"+
    "\22\15\1\316\5\15\2\0\1\15\17\0\17\15\1\317"+
    "\10\15\2\0\1\15\17\0\21\15\1\320\6\15\2\0"+
    "\1\15\17\0\17\15\1\321\10\15\2\0\1\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\4\11\2\1\2\11\16\1\1\11"+
    "\1\1\1\0\26\1\1\11\2\0\27\1\1\0\203\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEX", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 39: break;
          case 3:
            { return token(yytext(), "parentecisA", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 4:
            { return token(yytext(), "parentecisC", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 5:
            { return token(yytext(), "Signo Aritmetico", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 6:
            { return token(yytext(), "coma", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 7:
            { return token(yytext(), "numero", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 8:
            { return token(yytext(), "Fin linea", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 9:
            { return token(yytext(), "asignación", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 10:
            { return token(yytext(), "CorcheteA", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 11:
            { return token(yytext(), "CorcheteC", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 12:
            { return token(yytext(), "if", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 13:
            { return token(yytext(), "fin", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 14:
            { return token(yytext(), "for", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 15:
            { return token(yytext(), "variable", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 16:
            { return token(yytext(), "inicio", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 17:
            { return token(yytext(), "booleano", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 18:
            { return token(yytext(), "tiempo", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 19:
            { return token(yytext(), "pantalla", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 20:
            { return token(yytext(), "while", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 21:
            { return token(yytext(), "estado", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 22:
            { return token(yytext(), "pedido", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 23:
            { return token(yytext(), "vermenu", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 24:
            { return token(yytext(), "vermesa", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 25:
            { return token(yytext(), "rotarmenu", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 26:
            { return token(yytext(), "hDia", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 27:
            { return token(yytext(), "numeroMesa", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 28:
            { return token(yytext(), "tcomida", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 29:
            { return token(yytext(), "verofertas", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 30:
            { return token(yytext(), "estadomesas", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 31:
            { return token(yytext(), "declararmenu", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 32:
            { return token(yytext(), "prepmesa", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 33:
            { return token(yytext(), "tiempopedido", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 34:
            { return token(yytext(), "iluminarcamino", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 35:
            { return token(yytext(), "numasientos", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 36:
            { return token(yytext(), "realizarpedido", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 37:
            { return token(yytext(), "solicitarmesero", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
