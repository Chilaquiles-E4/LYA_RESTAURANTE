// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\7\0\1\5\1\6\1\7\1\10\1\11\1\10\1\0"+
    "\1\12\1\13\11\14\1\0\1\15\1\0\1\16\3\0"+
    "\1\17\1\20\1\21\1\22\10\20\1\23\15\20\4\0"+
    "\1\20\1\0\1\24\1\20\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\20\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\20\1\50\1\51\1\0\1\52\7\0\1\3\73\0"+
    "\1\20\7\0\1\20\3\0\1\20\3\0\1\20\1\0"+
    "\1\20\6\0\1\20\1\0\1\20\4\0\1\20\7\0"+
    "\1\20\3\0\1\20\3\0\1\53\1\0\1\20\6\0"+
    "\1\20\1\0\1\20\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\10\1\11\16\1\1\12\1\13\1\0\1\2"+
    "\5\1\1\14\17\1\1\15\2\0\3\1\1\16\22\1"+
    "\1\17\3\1\1\0\1\2\4\1\1\20\15\1\1\21"+
    "\11\1\1\22\4\1\1\23\11\1\1\24\1\1\1\25"+
    "\3\1\1\26\25\1\1\27\5\1\1\30\1\31\27\1"+
    "\1\32\7\1\1\33\2\1\1\34\4\1\1\35\1\1"+
    "\1\36\1\1\1\37\6\1\1\40\2\1\1\41\2\1"+
    "\1\42\4\1\1\43\1\44\1\45\1\1\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\54\0\54\0\54\0\54"+
    "\0\204\0\260\0\54\0\54\0\334\0\u0108\0\u0134\0\u0160"+
    "\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0"+
    "\0\u02ec\0\u0318\0\54\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\334\0\u04a4\0\u04d0\0\u04fc\0\u0528"+
    "\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688"+
    "\0\u06b4\0\u06e0\0\u070c\0\54\0\u0738\0\u0764\0\u0790\0\u07bc"+
    "\0\u07e8\0\334\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0"+
    "\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50"+
    "\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\334\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\u0738\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\334\0\u0c8c"+
    "\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\334\0\u0ec8\0\u0ef4\0\u0f20"+
    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\334\0\u1054"+
    "\0\u1080\0\u10ac\0\u10d8\0\334\0\u1104\0\u1130\0\u115c\0\u1188"+
    "\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\334\0\u1290\0\u12bc"+
    "\0\u12e8\0\u1314\0\u1340\0\334\0\u136c\0\u1398\0\u13c4\0\u13f0"+
    "\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550"+
    "\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0"+
    "\0\u16dc\0\334\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\334"+
    "\0\334\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec"+
    "\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c"+
    "\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac"+
    "\0\334\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0"+
    "\0\334\0\u1d0c\0\u1d38\0\334\0\u1d64\0\u1d90\0\u1dbc\0\u1de8"+
    "\0\334\0\u1e14\0\334\0\u1e40\0\334\0\u1e6c\0\u1e98\0\u1ec4"+
    "\0\u1ef0\0\u1f1c\0\u1f48\0\334\0\u1f74\0\u1fa0\0\334\0\u1fcc"+
    "\0\u1ff8\0\334\0\u2024\0\u2050\0\u207c\0\u20a8\0\334\0\334"+
    "\0\334\0\u20d4\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\2\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\7\15\1\16\1\17"+
    "\1\20\1\15\1\21\1\22\1\15\1\23\1\24\1\15"+
    "\1\25\1\15\1\26\1\27\1\30\1\15\1\31\1\32"+
    "\1\15\1\33\1\34\1\15\56\0\1\3\60\0\1\35"+
    "\2\0\1\36\54\0\2\12\56\0\32\15\2\0\1\15"+
    "\17\0\10\15\1\37\21\15\2\0\1\15\17\0\24\15"+
    "\1\40\5\15\2\0\1\15\17\0\5\15\1\41\12\15"+
    "\1\42\11\15\2\0\1\15\17\0\20\15\1\43\11\15"+
    "\2\0\1\15\17\0\11\15\1\44\3\15\1\45\14\15"+
    "\2\0\1\15\17\0\5\15\1\46\24\15\2\0\1\15"+
    "\17\0\20\15\1\47\5\15\1\50\3\15\2\0\1\15"+
    "\17\0\10\15\1\51\12\15\1\52\6\15\2\0\1\15"+
    "\17\0\10\15\1\53\7\15\1\54\11\15\2\0\1\15"+
    "\17\0\20\15\1\55\11\15\2\0\1\15\17\0\5\15"+
    "\1\56\6\15\1\57\6\15\1\60\6\15\2\0\1\15"+
    "\17\0\5\15\1\61\2\15\1\62\21\15\2\0\1\15"+
    "\17\0\13\15\1\63\16\15\2\0\1\15\15\0\1\64"+
    "\36\0\7\65\1\66\44\65\2\36\1\3\1\36\1\4"+
    "\47\36\17\0\6\15\1\67\23\15\2\0\1\15\17\0"+
    "\25\15\1\70\4\15\2\0\1\15\17\0\15\15\1\71"+
    "\14\15\2\0\1\15\17\0\23\15\1\72\6\15\2\0"+
    "\1\15\17\0\23\15\1\73\6\15\2\0\1\15\17\0"+
    "\26\15\1\74\3\15\2\0\1\15\17\0\14\15\1\75"+
    "\15\15\2\0\1\76\17\0\6\15\1\77\23\15\2\0"+
    "\1\15\17\0\16\15\1\100\13\15\2\0\1\15\17\0"+
    "\7\15\1\101\14\15\1\102\5\15\2\0\1\15\17\0"+
    "\10\15\1\103\3\15\1\104\15\15\2\0\1\15\17\0"+
    "\5\15\1\105\4\15\1\106\17\15\2\0\1\15\17\0"+
    "\25\15\1\107\4\15\2\0\1\15\17\0\15\15\1\110"+
    "\14\15\2\0\1\15\17\0\23\15\1\111\6\15\2\0"+
    "\1\15\17\0\10\15\1\112\10\15\1\113\10\15\2\0"+
    "\1\15\17\0\26\15\1\114\3\15\2\0\1\15\17\0"+
    "\23\15\1\115\6\15\2\0\1\15\17\0\12\15\1\116"+
    "\10\15\1\117\6\15\2\0\1\15\17\0\14\15\1\120"+
    "\15\15\2\0\1\15\7\65\1\121\53\65\1\121\2\65"+
    "\1\122\41\65\17\0\15\15\1\123\14\15\2\0\1\15"+
    "\17\0\5\15\1\124\24\15\2\0\1\15\17\0\24\15"+
    "\1\114\5\15\2\0\1\15\17\0\5\15\1\125\24\15"+
    "\2\0\1\15\17\0\16\15\1\126\13\15\2\0\1\15"+
    "\17\0\17\15\1\127\12\15\2\0\1\15\17\0\5\15"+
    "\1\130\24\15\2\0\1\15\17\0\13\15\1\131\16\15"+
    "\2\0\1\15\17\0\10\15\1\132\21\15\2\0\1\15"+
    "\17\0\14\15\1\133\15\15\2\0\1\15\17\0\22\15"+
    "\1\134\7\15\2\0\1\15\17\0\21\15\1\135\10\15"+
    "\2\0\1\15\17\0\17\15\1\136\12\15\2\0\1\15"+
    "\17\0\15\15\1\137\14\15\2\0\1\15\17\0\26\15"+
    "\1\140\3\15\2\0\1\15\17\0\5\15\1\141\24\15"+
    "\2\0\1\15\17\0\14\15\1\142\15\15\2\0\1\15"+
    "\17\0\7\15\1\131\22\15\2\0\1\15\17\0\16\15"+
    "\1\143\13\15\2\0\1\15\17\0\20\15\1\144\11\15"+
    "\2\0\1\15\17\0\10\15\1\145\21\15\2\0\1\15"+
    "\17\0\10\15\1\146\21\15\2\0\1\15\17\0\16\15"+
    "\1\147\1\15\1\150\11\15\2\0\1\15\17\0\15\15"+
    "\1\151\14\15\2\0\1\15\7\65\1\121\2\65\1\3"+
    "\41\65\17\0\5\15\1\152\24\15\2\0\1\15\17\0"+
    "\7\15\1\153\22\15\2\0\1\15\17\0\3\15\1\154"+
    "\26\15\2\0\1\15\17\0\14\15\1\155\15\15\2\0"+
    "\1\15\17\0\17\15\1\156\12\15\2\0\1\15\17\0"+
    "\10\15\1\157\21\15\2\0\1\15\17\0\23\15\1\160"+
    "\6\15\2\0\1\15\17\0\7\15\1\161\22\15\2\0"+
    "\1\15\17\0\26\15\1\162\3\15\2\0\1\15\17\0"+
    "\5\15\1\163\24\15\2\0\1\15\17\0\25\15\1\164"+
    "\4\15\2\0\1\15\17\0\14\15\1\165\15\15\2\0"+
    "\1\15\17\0\15\15\1\166\14\15\2\0\1\15\17\0"+
    "\23\15\1\167\6\15\2\0\1\15\17\0\6\15\1\170"+
    "\23\15\2\0\1\15\17\0\21\15\1\171\10\15\2\0"+
    "\1\15\17\0\2\15\1\172\27\15\2\0\1\15\17\0"+
    "\25\15\1\173\4\15\2\0\1\15\17\0\10\15\1\174"+
    "\21\15\2\0\1\15\17\0\11\15\1\175\20\15\2\0"+
    "\1\15\17\0\10\15\1\176\21\15\2\0\1\15\17\0"+
    "\23\15\1\177\6\15\2\0\1\15\17\0\20\15\1\200"+
    "\11\15\2\0\1\15\17\0\10\15\1\201\21\15\2\0"+
    "\1\15\17\0\17\15\1\202\12\15\2\0\1\15\17\0"+
    "\5\15\1\157\24\15\2\0\1\15\17\0\20\15\1\203"+
    "\11\15\2\0\1\15\17\0\20\15\1\204\11\15\2\0"+
    "\1\15\17\0\10\15\1\205\21\15\2\0\1\15\17\0"+
    "\23\15\1\206\6\15\2\0\1\15\17\0\31\15\1\207"+
    "\2\0\1\15\17\0\5\15\1\210\24\15\2\0\1\15"+
    "\17\0\16\15\1\211\13\15\2\0\1\15\17\0\14\15"+
    "\1\212\15\15\2\0\1\15\17\0\20\15\1\213\11\15"+
    "\2\0\1\15\17\0\20\15\1\214\11\15\2\0\1\15"+
    "\17\0\5\15\1\215\24\15\2\0\1\15\17\0\17\15"+
    "\1\216\4\15\1\217\5\15\2\0\1\15\17\0\10\15"+
    "\1\220\21\15\2\0\1\15\17\0\5\15\1\221\24\15"+
    "\2\0\1\15\17\0\16\15\1\222\13\15\2\0\1\15"+
    "\17\0\15\15\1\223\14\15\2\0\1\15\17\0\5\15"+
    "\1\224\24\15\2\0\1\15\17\0\1\225\3\15\1\226"+
    "\25\15\2\0\1\15\17\0\25\15\1\227\4\15\2\0"+
    "\1\15\17\0\5\15\1\230\24\15\2\0\1\15\17\0"+
    "\5\15\1\231\24\15\2\0\1\15\17\0\23\15\1\232"+
    "\6\15\2\0\1\15\17\0\10\15\1\233\21\15\2\0"+
    "\1\15\17\0\25\15\1\234\4\15\2\0\1\15\17\0"+
    "\21\15\1\235\10\15\2\0\1\15\17\0\16\15\1\236"+
    "\13\15\2\0\1\15\17\0\23\15\1\237\6\15\2\0"+
    "\1\15\17\0\26\15\1\240\3\15\2\0\1\15\17\0"+
    "\5\15\1\241\24\15\2\0\1\15\17\0\23\15\1\242"+
    "\6\15\2\0\1\15\17\0\23\15\1\243\6\15\2\0"+
    "\1\15\17\0\10\15\1\244\21\15\2\0\1\15\17\0"+
    "\3\15\1\245\26\15\2\0\1\15\17\0\23\15\1\246"+
    "\6\15\2\0\1\15\17\0\24\15\1\247\5\15\2\0"+
    "\1\15\17\0\10\15\1\250\21\15\2\0\1\15\17\0"+
    "\10\15\1\215\21\15\2\0\1\15\17\0\23\15\1\251"+
    "\6\15\2\0\1\15\17\0\23\15\1\252\6\15\2\0"+
    "\1\15\17\0\17\15\1\253\12\15\2\0\1\15\17\0"+
    "\5\15\1\254\24\15\2\0\1\15\17\0\10\15\1\255"+
    "\21\15\2\0\1\15\17\0\14\15\1\256\15\15\2\0"+
    "\1\15\17\0\14\15\1\257\15\15\2\0\1\15\17\0"+
    "\25\15\1\260\4\15\2\0\1\15\17\0\16\15\1\261"+
    "\13\15\2\0\1\15\17\0\24\15\1\262\5\15\2\0"+
    "\1\15\17\0\14\15\1\263\15\15\2\0\1\15\17\0"+
    "\6\15\1\264\23\15\2\0\1\15\17\0\14\15\1\265"+
    "\15\15\2\0\1\15\17\0\24\15\1\266\5\15\2\0"+
    "\1\15\17\0\16\15\1\267\13\15\2\0\1\15\17\0"+
    "\21\15\1\270\10\15\2\0\1\15\17\0\26\15\1\271"+
    "\3\15\2\0\1\15\17\0\23\15\1\272\6\15\2\0"+
    "\1\15\17\0\7\15\1\273\22\15\2\0\1\15\17\0"+
    "\7\15\1\274\22\15\2\0\1\15\17\0\5\15\1\275"+
    "\24\15\2\0\1\15\17\0\5\15\1\276\24\15\2\0"+
    "\1\15\17\0\10\15\1\277\21\15\2\0\1\15\17\0"+
    "\5\15\1\300\24\15\2\0\1\15\17\0\5\15\1\301"+
    "\24\15\2\0\1\15\17\0\5\15\1\302\24\15\2\0"+
    "\1\15\17\0\10\15\1\303\21\15\2\0\1\15\17\0"+
    "\5\15\1\304\24\15\2\0\1\15\17\0\10\15\1\305"+
    "\21\15\2\0\1\15\17\0\10\15\1\306\21\15\2\0"+
    "\1\15\17\0\16\15\1\307\13\15\2\0\1\15\17\0"+
    "\14\15\1\310\15\15\2\0\1\15\17\0\5\15\1\311"+
    "\24\15\2\0\1\15\17\0\17\15\1\312\12\15\2\0"+
    "\1\15\17\0\24\15\1\313\5\15\2\0\1\15\17\0"+
    "\17\15\1\314\12\15\2\0\1\15\17\0\24\15\1\315"+
    "\5\15\2\0\1\15\17\0\16\15\1\316\13\15\2\0"+
    "\1\15\17\0\17\15\1\317\12\15\2\0\1\15\17\0"+
    "\24\15\1\320\5\15\2\0\1\15\17\0\7\15\1\321"+
    "\22\15\2\0\1\15\17\0\10\15\1\322\21\15\2\0"+
    "\1\15\17\0\7\15\1\323\22\15\2\0\1\15\17\0"+
    "\20\15\1\232\11\15\2\0\1\15\17\0\26\15\1\324"+
    "\3\15\2\0\1\15\17\0\14\15\1\325\15\15\2\0"+
    "\1\15\17\0\25\15\1\326\4\15\2\0\1\15\17\0"+
    "\5\15\1\327\24\15\2\0\1\15\17\0\14\15\1\330"+
    "\15\15\2\0\1\15\17\0\24\15\1\331\5\15\2\0"+
    "\1\15\17\0\20\15\1\332\11\15\2\0\1\15\17\0"+
    "\17\15\1\333\12\15\2\0\1\15\17\0\20\15\1\334"+
    "\11\15\2\0\1\15\17\0\7\15\1\335\22\15\2\0"+
    "\1\15\17\0\10\15\1\336\21\15\2\0\1\15\17\0"+
    "\20\15\1\337\11\15\2\0\1\15\17\0\24\15\1\340"+
    "\5\15\2\0\1\15\17\0\20\15\1\341\11\15\2\0"+
    "\1\15\17\0\23\15\1\342\6\15\2\0\1\15\17\0"+
    "\20\15\1\343\11\15\2\0\1\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\4\11\2\1\2\11\16\1\1\11"+
    "\1\1\1\0\26\1\1\11\2\0\32\1\1\0\222\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEX", yyline, yycolumn);
            }
            // fall through
          case 39: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 40: break;
          case 3:
            { return token(yytext(), "parentecisA", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 4:
            { return token(yytext(), "parentecisC", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 5:
            { return token(yytext(), "Signo Aritmetico", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 6:
            { return token(yytext(), "coma", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 7:
            { return token(yytext(), "numero", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 8:
            { return token(yytext(), "finlinea", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 9:
            { return token(yytext(), "asignación", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 10:
            { return token(yytext(), "CorcheteA", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 11:
            { return token(yytext(), "CorcheteC", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 12:
            { return token(yytext(), "if", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 13:
            { return token(yytext(), "fin", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 14:
            { return token(yytext(), "for", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 15:
            { return token(yytext(), "variable", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 16:
            { return token(yytext(), "inicio", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 17:
            { return token(yytext(), "booleano", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 18:
            { return token(yytext(), "tiempo", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 19:
            { return token(yytext(), "pantalla", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 20:
            { return token(yytext(), "while", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 21:
            { return token(yytext(), "estado", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 22:
            { return token(yytext(), "pedido", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 23:
            { return token(yytext(), "tipo", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 24:
            { return token(yytext(), "vermenu", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 25:
            { return token(yytext(), "vermesa", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 26:
            { return token(yytext(), "rotarmenu", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 27:
            { return token(yytext(), "hDia", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 28:
            { return token(yytext(), "numeroMesa", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 29:
            { return token(yytext(), "tcomida", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 30:
            { return token(yytext(), "verofertas", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 31:
            { return token(yytext(), "estadomesas", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 32:
            { return token(yytext(), "declararmenu", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 33:
            { return token(yytext(), "prepmesa", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 34:
            { return token(yytext(), "tiempopedido", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 35:
            { return token(yytext(), "iluminarcamino", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 36:
            { return token(yytext(), "numasientos", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 37:
            { return token(yytext(), "realizarpedido", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 38:
            { return token(yytext(), "solicitarmesero", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
