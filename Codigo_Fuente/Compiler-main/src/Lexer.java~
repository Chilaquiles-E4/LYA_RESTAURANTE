// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\0\1\7\3\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\13\1\0\1\15\1\16\11\17\1\0"+
    "\1\20\1\21\1\22\1\21\2\0\1\23\1\24\1\25"+
    "\1\26\10\24\1\27\15\24\1\30\1\0\1\31\1\0"+
    "\1\24\1\0\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\2\24\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\2\24\1\57\1\60\1\0\1\61\7\0\1\3\73\0"+
    "\1\24\7\0\1\24\3\0\1\24\3\0\1\24\1\0"+
    "\1\24\6\0\1\24\1\0\1\24\4\0\1\24\7\0"+
    "\1\24\3\0\1\24\3\0\1\62\1\0\1\24\6\0"+
    "\1\24\1\0\1\24\u012b\0\2\3\326\0\u0100\63";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\5\1\7\1\10\1\11\1\12\17\13\1\14\1\15"+
    "\1\1\1\16\1\0\1\2\1\11\1\0\7\13\1\17"+
    "\21\13\1\20\2\0\1\16\3\0\1\21\5\13\1\22"+
    "\2\13\1\23\21\13\1\24\3\13\2\25\1\0\1\2"+
    "\5\13\1\26\16\13\1\27\4\13\1\30\6\13\1\31"+
    "\4\13\1\32\12\13\1\33\2\13\1\34\3\13\1\35"+
    "\25\13\1\36\5\13\1\37\1\40\27\13\1\41\7\13"+
    "\1\42\2\13\1\43\4\13\1\44\1\13\1\45\1\13"+
    "\1\46\6\13\1\47\2\13\1\50\2\13\1\51\4\13"+
    "\1\52\1\53\1\54\1\13\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\150\0\234\0\320\0\150\0\150"+
    "\0\150\0\150\0\u0104\0\u0138\0\150\0\u016c\0\150\0\u01a0"+
    "\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340"+
    "\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\150\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\150\0\u05b0\0\u05e4\0\u0618"+
    "\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u01a0\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\150"+
    "\0\u04e0\0\u0ac4\0\150\0\u0af8\0\u0b2c\0\u0b60\0\150\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u01a0\0\u0c98\0\u0ccc\0\u01a0"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u01a0\0\u1074\0\u10a8\0\u10dc\0\150\0\u1110\0\u1144"+
    "\0\u0af8\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u01a0\0\u127c"+
    "\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u01a0\0\u1554\0\u1588"+
    "\0\u15bc\0\u15f0\0\150\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4"+
    "\0\u1728\0\u01a0\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u01a0\0\u182c"+
    "\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc"+
    "\0\u1a00\0\u01a0\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38"+
    "\0\u01a0\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4"+
    "\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44"+
    "\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u01a0\0\u1fb0"+
    "\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u01a0\0\u01a0\0\u20b4\0\u20e8"+
    "\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288"+
    "\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428"+
    "\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u01a0\0\u2560\0\u2594"+
    "\0\u25c8\0\u25fc\0\u2630\0\u2664\0\u2698\0\u01a0\0\u26cc\0\u2700"+
    "\0\u01a0\0\u2734\0\u2768\0\u279c\0\u27d0\0\u01a0\0\u2804\0\u01a0"+
    "\0\u2838\0\u01a0\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970"+
    "\0\u01a0\0\u29a4\0\u29d8\0\u01a0\0\u2a0c\0\u2a40\0\u01a0\0\u2a74"+
    "\0\u2aa8\0\u2adc\0\u2b10\0\u01a0\0\u01a0\0\u01a0\0\u2b44\0\u01a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\4\1\5\1\3\1\6\1\7"+
    "\1\10\2\11\1\12\1\13\1\3\1\14\1\15\1\16"+
    "\1\17\5\20\2\3\1\20\1\21\1\20\1\22\1\23"+
    "\1\24\1\20\1\25\1\26\1\20\1\27\1\30\1\20"+
    "\1\31\1\20\1\32\1\33\1\34\1\20\1\35\1\36"+
    "\1\20\1\37\1\40\1\20\1\0\1\3\2\4\1\0"+
    "\1\4\1\5\1\41\1\6\1\7\1\10\2\11\1\12"+
    "\1\13\1\3\1\14\1\15\1\16\1\17\5\20\2\3"+
    "\1\20\1\21\1\20\1\22\1\23\1\24\1\20\1\25"+
    "\1\26\1\20\1\27\1\30\1\20\1\31\1\20\1\32"+
    "\1\33\1\34\1\20\1\35\1\36\1\20\1\37\1\40"+
    "\1\20\67\0\1\4\77\0\2\42\56\0\1\43\2\0"+
    "\1\44\64\0\2\14\66\0\1\45\57\0\2\20\3\0"+
    "\5\20\1\46\1\0\26\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\14\20\1\47\11\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\4\20"+
    "\1\50\21\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\20\20\1\51\5\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\1\52\10\20\1\53"+
    "\2\20\1\54\11\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\14\20\1\55\11\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\5\20\1\56"+
    "\3\20\1\57\1\20\1\60\12\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\1\61\25\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\14\20"+
    "\1\62\5\20\1\63\3\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\4\20\1\64\12\20\1\65"+
    "\6\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\66\7\20\1\67\11\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\14\20\1\70"+
    "\4\20\1\71\4\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\1\72\7\20\1\73\6\20\1\74"+
    "\6\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\1\75\3\20\1\76\21\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\7\20\1\77\16\20"+
    "\2\0\1\20\21\0\1\100\43\0\2\101\4\0\1\102"+
    "\54\101\17\0\2\103\44\0\12\104\1\105\51\104\2\44"+
    "\1\4\2\44\1\5\56\44\23\0\5\106\1\0\1\107"+
    "\26\106\2\0\1\106\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\14\20\1\110\11\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\2\20\1\111\23\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\21\20"+
    "\1\112\4\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\11\20\1\113\14\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\14\20\1\114\11\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\17\20\1\115\6\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\17\20\1\116\6\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\22\20\1\117"+
    "\3\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\21\20\1\120\4\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\10\20\1\121\15\20\2\0"+
    "\1\122\17\0\2\20\3\0\5\20\1\46\1\0\2\20"+
    "\1\123\23\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\12\20\1\124\13\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\3\20\1\125\14\20"+
    "\1\126\5\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\4\20\1\127\3\20\1\130\15\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\1\131"+
    "\5\20\1\132\17\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\21\20\1\133\4\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\11\20\1\134"+
    "\14\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\17\20\1\135\6\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\17\20\1\136\6\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\4\20"+
    "\1\137\10\20\1\140\10\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\22\20\1\141\3\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\17\20"+
    "\1\142\6\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\6\20\1\143\10\20\1\144\6\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\10\20"+
    "\1\145\15\20\2\0\1\20\1\0\2\101\3\146\1\147"+
    "\1\102\54\101\1\0\12\104\1\150\63\104\1\150\2\104"+
    "\1\151\46\104\16\0\2\106\3\0\5\106\1\0\1\107"+
    "\26\106\2\0\1\106\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\11\20\1\152\14\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\11\20\1\153\14\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\1\154"+
    "\25\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\20\20\1\141\5\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\1\60\25\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\1\155\25\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\12\20\1\156\13\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\13\20\1\157\12\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\1\160\25\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\7\20\1\161\16\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\4\20\1\162\21\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\10\20\1\163"+
    "\15\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\16\20\1\164\7\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\15\20\1\165\10\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\13\20"+
    "\1\166\12\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\11\20\1\167\14\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\22\20\1\170\3\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\1\171\25\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\10\20\1\172\15\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\10\20\1\173\15\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\3\20\1\161\22\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\12\20\1\174\13\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\14\20\1\175"+
    "\11\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\176\21\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\4\20\1\177\21\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\12\20"+
    "\1\200\1\20\1\201\11\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\11\20\1\202\14\20\2\0"+
    "\1\20\3\0\1\203\61\0\12\104\1\150\2\104\1\4"+
    "\46\104\16\0\2\20\3\0\5\20\1\46\1\0\4\20"+
    "\1\204\21\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\1\205\25\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\3\20\1\206\22\20\2\0"+
    "\1\20\17\0\2\20\3\0\3\20\1\207\1\20\1\46"+
    "\1\0\26\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\10\20\1\210\15\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\13\20\1\211\12\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\4\20\1\212\21\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\17\20\1\213\6\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\3\20\1\214"+
    "\22\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\22\20\1\215\3\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\1\216\25\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\21\20\1\217"+
    "\4\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\10\20\1\220\15\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\11\20\1\221\14\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\17\20"+
    "\1\222\6\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\2\20\1\223\23\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\13\20\1\224\12\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\15\20\1\225\10\20\2\0\1\20\17\0\2\20\3\0"+
    "\2\20\1\226\2\20\1\46\1\0\26\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\21\20\1\227"+
    "\4\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\230\21\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\5\20\1\231\20\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\4\20"+
    "\1\232\21\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\1\233\25\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\17\20\1\234\6\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\14\20"+
    "\1\235\11\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\4\20\1\236\21\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\13\20\1\237\12\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\1\212\25\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\14\20\1\240\11\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\14\20\1\241\11\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\4\20\1\242\21\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\17\20\1\243\6\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\25\20\1\244"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\1\245\25\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\12\20\1\246\13\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\10\20\1\247\15\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\6\20\1\120\17\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\14\20\1\250\11\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\14\20\1\251"+
    "\11\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\1\252\25\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\13\20\1\253\4\20\1\254\5\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\4\20\1\255\21\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\13\20\1\120\12\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\1\256\25\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\12\20\1\257\13\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\11\20\1\260\14\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\1\261\25\20"+
    "\2\0\1\20\17\0\2\20\3\0\1\262\3\20\1\263"+
    "\1\46\1\0\26\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\21\20\1\264\4\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\1\265\25\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\1\266\25\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\17\20\1\267\6\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\4\20\1\270\21\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\21\20\1\271\4\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\15\20\1\272\10\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\12\20\1\273"+
    "\13\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\17\20\1\274\6\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\22\20\1\275\3\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\1\276"+
    "\25\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\17\20\1\277\6\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\17\20\1\300\6\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\4\20"+
    "\1\301\21\20\2\0\1\20\17\0\2\20\3\0\3\20"+
    "\1\302\1\20\1\46\1\0\26\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\17\20\1\303\6\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\20\20\1\304\5\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\4\20\1\305\21\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\4\20\1\252"+
    "\21\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\17\20\1\306\6\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\17\20\1\307\6\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\13\20"+
    "\1\310\12\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\1\311\25\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\4\20\1\312\21\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\10\20"+
    "\1\313\15\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\10\20\1\314\15\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\21\20\1\315\4\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\12\20\1\316\13\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\20\20\1\317\5\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\10\20\1\320"+
    "\15\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\2\20\1\321\23\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\10\20\1\322\15\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\20\20"+
    "\1\323\5\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\12\20\1\324\13\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\15\20\1\325\10\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\22\20\1\326\3\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\17\20\1\327\6\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\3\20\1\330"+
    "\22\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\3\20\1\331\22\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\1\332\25\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\1\333\25\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\4\20\1\334\21\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\1\335\25\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\1\336\25\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\1\337"+
    "\25\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\340\21\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\1\341\25\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\4\20\1\342"+
    "\21\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\343\21\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\12\20\1\344\13\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\10\20"+
    "\1\345\15\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\1\346\25\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\13\20\1\347\12\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\20\20"+
    "\1\350\5\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\13\20\1\351\12\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\20\20\1\352\5\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\12\20\1\353\13\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\13\20\1\354\12\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\20\20\1\355"+
    "\5\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\3\20\1\356\22\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\4\20\1\357\21\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\3\20"+
    "\1\360\22\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\14\20\1\267\11\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\22\20\1\361\3\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\10\20\1\362\15\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\21\20\1\363\4\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\1\364\25\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\10\20\1\365\15\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\20\20\1\366\5\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\14\20\1\367"+
    "\11\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\13\20\1\370\12\20\2\0\1\20\17\0\2\20"+
    "\3\0\5\20\1\46\1\0\14\20\1\371\11\20\2\0"+
    "\1\20\17\0\2\20\3\0\5\20\1\46\1\0\3\20"+
    "\1\372\22\20\2\0\1\20\17\0\2\20\3\0\5\20"+
    "\1\46\1\0\4\20\1\373\21\20\2\0\1\20\17\0"+
    "\2\20\3\0\5\20\1\46\1\0\14\20\1\374\11\20"+
    "\2\0\1\20\17\0\2\20\3\0\5\20\1\46\1\0"+
    "\20\20\1\375\5\20\2\0\1\20\17\0\2\20\3\0"+
    "\5\20\1\46\1\0\14\20\1\376\11\20\2\0\1\20"+
    "\17\0\2\20\3\0\5\20\1\46\1\0\17\20\1\377"+
    "\6\20\2\0\1\20\17\0\2\20\3\0\5\20\1\46"+
    "\1\0\14\20\1\u0100\11\20\2\0\1\20\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\4\11\2\1\1\11\1\1\1\11"+
    "\17\1\1\11\3\1\1\0\1\1\1\11\1\0\31\1"+
    "\1\11\2\0\1\11\3\0\1\11\36\1\1\11\1\1"+
    "\1\0\32\1\1\11\175\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEX", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 47: break;
          case 3:
            { return token(yytext(), "parentecisA", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 4:
            { return token(yytext(), "parentecisC", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 5:
            { return token(yytext(), "Signo Aritmetico", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 6:
            { return token(yytext(), "coma", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 7:
            { return token(yytext(), "numero", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 8:
            { return token(yytext(), "finlinea", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 9:
            { return token(yytext(), "operadorLogico", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 10:
            { return token(yytext(), "asignacion", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 11:
            { return token(yytext(), "Identificadores", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 12:
            { return token(yytext(), "CorcheteA", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 13:
            { return token(yytext(), "CorcheteC", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 14:
            { return token(yytext(), "dinero", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 15:
            { return token(yytext(), "if", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 16:
            { return token(yytext(), "fin", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 17:
            { return token(yytext(), "nombreArreglo[]", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 18:
            { return token(yytext(), "for", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 19:
            { return token(yytext(), "tipoDato", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 20:
            { return token(yytext(), "variable", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 21:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return token(yytext(), "Cadenas", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 22:
            { return token(yytext(), "inicio", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 23:
            { return token(yytext(), "booleano", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 24:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return token(yytext(), "Cadenas", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 25:
            { return token(yytext(), "tiempo", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 26:
            { return token(yytext(), "pantalla", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 27:
            { return token(yytext(), "while", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 28:
            { return token(yytext(), "estado", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 29:
            { return token(yytext(), "pedido", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 30:
            { return token(yytext(), "tipo", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 31:
            { return token(yytext(), "vermenu", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 32:
            { return token(yytext(), "vermesa", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 33:
            { return token(yytext(), "rotarmenu", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 34:
            { return token(yytext(), "hDia", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 35:
            { return token(yytext(), "numeroMesa", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 36:
            { return token(yytext(), "tcomida", yyline, yycolumn);
            }
            // fall through
          case 81: break;
          case 37:
            { return token(yytext(), "verofertas", yyline, yycolumn);
            }
            // fall through
          case 82: break;
          case 38:
            { return token(yytext(), "estadomesas", yyline, yycolumn);
            }
            // fall through
          case 83: break;
          case 39:
            { return token(yytext(), "declararmenu", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 40:
            { return token(yytext(), "prepmesa", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 41:
            { return token(yytext(), "tiempopedido", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          case 42:
            { return token(yytext(), "iluminarcamino", yyline, yycolumn);
            }
            // fall through
          case 87: break;
          case 43:
            { return token(yytext(), "numasientos", yyline, yycolumn);
            }
            // fall through
          case 88: break;
          case 44:
            { return token(yytext(), "realizarpedido", yyline, yycolumn);
            }
            // fall through
          case 89: break;
          case 45:
            { return token(yytext(), "solicitarmesero", yyline, yycolumn);
            }
            // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
