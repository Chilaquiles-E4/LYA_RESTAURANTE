// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\3\0\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\12\1\0\1\14\1\15\11\16\1\0\1\17"+
    "\1\20\1\21\1\20\2\0\1\22\1\23\1\24\1\25"+
    "\10\23\1\26\15\23\1\27\1\0\1\30\1\0\1\23"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\23\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\2\23"+
    "\1\56\1\57\1\0\1\60\7\0\1\3\73\0\1\23"+
    "\7\0\1\23\3\0\1\23\3\0\1\23\1\0\1\23"+
    "\6\0\1\23\1\0\1\23\4\0\1\23\7\0\1\23"+
    "\3\0\1\23\3\0\1\61\1\0\1\23\6\0\1\23"+
    "\1\0\1\23\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\5\1\7\1\10\1\11\1\12\17\13\1\14\1\15"+
    "\1\16\2\0\1\2\1\11\1\0\7\13\1\17\21\13"+
    "\1\20\1\16\1\21\3\0\1\22\5\13\1\23\2\13"+
    "\1\22\21\13\1\24\3\13\1\0\1\2\5\13\1\25"+
    "\16\13\1\26\12\13\1\27\4\13\1\30\12\13\1\31"+
    "\2\13\1\32\3\13\1\33\25\13\1\34\5\13\1\35"+
    "\1\36\27\13\1\37\7\13\1\40\2\13\1\41\4\13"+
    "\1\42\1\13\1\43\1\13\1\44\6\13\1\45\2\13"+
    "\1\46\2\13\1\47\4\13\1\50\1\51\1\52\1\13"+
    "\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\310\0\62\0\62"+
    "\0\62\0\62\0\372\0\u012c\0\62\0\u015e\0\62\0\u0190"+
    "\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320"+
    "\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\62\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\62\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0190\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\62"+
    "\0\62\0\62\0\u0a5a\0\u0a8c\0\u0abe\0\62\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0190\0\u0bea\0\u0c1c\0\u0190\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e"+
    "\0\u0190\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u0a5a\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u0190\0\u1162\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u0190\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u0190\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u0190\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2"+
    "\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u0190\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u0190\0\u19fa\0\u1a2c\0\u1a5e"+
    "\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee"+
    "\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e"+
    "\0\u1db0\0\u1de2\0\u0190\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u0190\0\u0190\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008"+
    "\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198"+
    "\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328"+
    "\0\u235a\0\u0190\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486"+
    "\0\u24b8\0\u0190\0\u24ea\0\u251c\0\u0190\0\u254e\0\u2580\0\u25b2"+
    "\0\u25e4\0\u0190\0\u2616\0\u0190\0\u2648\0\u0190\0\u267a\0\u26ac"+
    "\0\u26de\0\u2710\0\u2742\0\u2774\0\u0190\0\u27a6\0\u27d8\0\u0190"+
    "\0\u280a\0\u283c\0\u0190\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u0190"+
    "\0\u0190\0\u0190\0\u2936\0\u0190";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\2\11\1\12\1\13\1\2\1\14\1\15\1\16\1\17"+
    "\5\20\2\2\1\20\1\21\1\20\1\22\1\23\1\24"+
    "\1\20\1\25\1\26\1\20\1\27\1\30\1\20\1\31"+
    "\1\20\1\32\1\33\1\34\1\20\1\35\1\36\1\20"+
    "\1\37\1\40\1\20\64\0\1\3\74\0\2\41\65\0"+
    "\5\42\2\0\26\42\2\0\1\42\11\0\1\43\2\0"+
    "\1\44\62\0\2\14\64\0\1\45\55\0\2\20\3\0"+
    "\5\20\1\46\1\0\26\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\14\20\1\47\11\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\4\20"+
    "\1\50\21\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\20\20\1\51\5\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\1\52\10\20\1\53"+
    "\2\20\1\54\11\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\14\20\1\55\11\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\5\20\1\56"+
    "\3\20\1\57\1\20\1\60\12\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\1\61\25\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\14\20"+
    "\1\62\5\20\1\63\3\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\4\20\1\64\12\20\1\65"+
    "\6\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\66\7\20\1\67\11\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\14\20\1\70"+
    "\4\20\1\71\4\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\1\72\7\20\1\73\6\20\1\74"+
    "\6\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\1\75\3\20\1\76\21\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\7\20\1\77\16\20"+
    "\2\0\1\20\17\0\1\100\57\0\2\101\51\0\1\102"+
    "\6\0\2\42\3\0\5\42\2\0\26\42\2\0\1\42"+
    "\11\103\1\104\50\103\2\44\1\3\1\44\1\4\55\44"+
    "\22\0\5\105\1\0\1\106\26\105\2\0\1\105\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\14\20\1\107\11\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\2\20\1\110\23\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\21\20\1\111\4\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\11\20\1\112"+
    "\14\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\14\20\1\113\11\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\17\20\1\114\6\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\17\20"+
    "\1\115\6\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\22\20\1\116\3\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\21\20\1\117\4\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\10\20\1\120\15\20\2\0\1\121\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\2\20\1\122\23\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\12\20\1\123"+
    "\13\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\3\20\1\124\14\20\1\125\5\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\4\20\1\126"+
    "\3\20\1\127\15\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\1\130\5\20\1\131\17\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\21\20"+
    "\1\132\4\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\11\20\1\133\14\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\17\20\1\134\6\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\17\20\1\135\6\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\4\20\1\136\10\20\1\137\10\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\22\20\1\140\3\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\17\20\1\141\6\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\6\20\1\142"+
    "\10\20\1\143\6\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\10\20\1\144\15\20\2\0\1\20"+
    "\11\103\1\145\61\103\1\145\2\103\1\146\45\103\15\0"+
    "\2\105\3\0\5\105\1\0\1\106\26\105\2\0\1\105"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\11\20\1\147"+
    "\14\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\11\20\1\150\14\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\1\151\25\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\20\20\1\140"+
    "\5\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\1\60\25\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\1\152\25\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\12\20\1\153\13\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\13\20\1\154\12\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\1\155\25\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\7\20\1\156\16\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\4\20\1\157\21\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\10\20\1\160\15\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\16\20\1\161"+
    "\7\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\15\20\1\162\10\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\13\20\1\163\12\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\11\20"+
    "\1\164\14\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\22\20\1\165\3\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\1\166\25\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\10\20"+
    "\1\167\15\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\10\20\1\170\15\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\3\20\1\156\22\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\12\20\1\171\13\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\14\20\1\172\11\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\4\20\1\173"+
    "\21\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\174\21\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\12\20\1\175\1\20\1\176"+
    "\11\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\11\20\1\177\14\20\2\0\1\20\11\103\1\145"+
    "\2\103\1\3\45\103\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\200\21\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\1\201\25\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\3\20\1\202"+
    "\22\20\2\0\1\20\15\0\2\20\3\0\3\20\1\203"+
    "\1\20\1\46\1\0\26\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\10\20\1\204\15\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\13\20"+
    "\1\205\12\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\4\20\1\206\21\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\17\20\1\207\6\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\3\20\1\210\22\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\22\20\1\211\3\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\1\212\25\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\21\20\1\213\4\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\10\20\1\214\15\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\11\20\1\215"+
    "\14\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\17\20\1\216\6\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\2\20\1\217\23\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\13\20"+
    "\1\220\12\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\15\20\1\221\10\20\2\0\1\20\15\0"+
    "\2\20\3\0\2\20\1\222\2\20\1\46\1\0\26\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\21\20\1\223\4\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\4\20\1\224\21\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\5\20\1\225"+
    "\20\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\226\21\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\1\227\25\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\17\20\1\230"+
    "\6\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\14\20\1\231\11\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\4\20\1\232\21\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\13\20"+
    "\1\233\12\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\1\206\25\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\14\20\1\234\11\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\14\20"+
    "\1\235\11\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\4\20\1\236\21\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\17\20\1\237\6\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\25\20\1\240\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\1\241\25\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\12\20\1\242\13\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\10\20"+
    "\1\243\15\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\6\20\1\117\17\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\14\20\1\244\11\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\14\20\1\245\11\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\1\246\25\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\13\20\1\247\4\20"+
    "\1\250\5\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\4\20\1\251\21\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\13\20\1\117\12\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\1\252\25\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\12\20\1\253\13\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\11\20\1\254\14\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\1\255\25\20\2\0\1\20\15\0\2\20\3\0\1\256"+
    "\3\20\1\257\1\46\1\0\26\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\21\20\1\260\4\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\1\261\25\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\1\262\25\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\17\20\1\263\6\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\4\20"+
    "\1\264\21\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\21\20\1\265\4\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\15\20\1\266\10\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\12\20\1\267\13\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\17\20\1\270\6\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\22\20\1\271"+
    "\3\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\1\272\25\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\17\20\1\273\6\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\17\20\1\274"+
    "\6\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\4\20\1\275\21\20\2\0\1\20\15\0\2\20"+
    "\3\0\3\20\1\276\1\20\1\46\1\0\26\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\17\20"+
    "\1\277\6\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\20\20\1\300\5\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\4\20\1\301\21\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\4\20\1\246\21\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\17\20\1\302\6\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\17\20\1\303"+
    "\6\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\13\20\1\304\12\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\1\305\25\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\4\20\1\306"+
    "\21\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\10\20\1\307\15\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\10\20\1\310\15\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\21\20"+
    "\1\311\4\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\12\20\1\312\13\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\20\20\1\313\5\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\10\20\1\314\15\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\2\20\1\315\23\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\10\20\1\316"+
    "\15\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\20\20\1\317\5\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\12\20\1\320\13\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\15\20"+
    "\1\321\10\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\22\20\1\322\3\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\17\20\1\323\6\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\3\20\1\324\22\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\3\20\1\325\22\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\1\326\25\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\1\327\25\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\4\20\1\330\21\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\1\331\25\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\1\332"+
    "\25\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\1\333\25\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\4\20\1\334\21\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\1\335\25\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\4\20\1\336\21\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\4\20\1\337\21\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\12\20\1\340"+
    "\13\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\10\20\1\341\15\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\1\342\25\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\13\20\1\343"+
    "\12\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\20\20\1\344\5\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\13\20\1\345\12\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\20\20"+
    "\1\346\5\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\12\20\1\347\13\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\13\20\1\350\12\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\20\20\1\351\5\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\3\20\1\352\22\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\4\20\1\353"+
    "\21\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\3\20\1\354\22\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\14\20\1\263\11\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\22\20"+
    "\1\355\3\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\10\20\1\356\15\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\21\20\1\357\4\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\1\360\25\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\10\20\1\361\15\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\20\20\1\362\5\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\14\20\1\363\11\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\13\20\1\364\12\20\2\0\1\20"+
    "\15\0\2\20\3\0\5\20\1\46\1\0\14\20\1\365"+
    "\11\20\2\0\1\20\15\0\2\20\3\0\5\20\1\46"+
    "\1\0\3\20\1\366\22\20\2\0\1\20\15\0\2\20"+
    "\3\0\5\20\1\46\1\0\4\20\1\367\21\20\2\0"+
    "\1\20\15\0\2\20\3\0\5\20\1\46\1\0\14\20"+
    "\1\370\11\20\2\0\1\20\15\0\2\20\3\0\5\20"+
    "\1\46\1\0\20\20\1\371\5\20\2\0\1\20\15\0"+
    "\2\20\3\0\5\20\1\46\1\0\14\20\1\372\11\20"+
    "\2\0\1\20\15\0\2\20\3\0\5\20\1\46\1\0"+
    "\17\20\1\373\6\20\2\0\1\20\15\0\2\20\3\0"+
    "\5\20\1\46\1\0\14\20\1\374\11\20\2\0\1\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\4\11\2\1\1\11\1\1\1\11"+
    "\17\1\1\11\2\1\2\0\1\1\1\11\1\0\31\1"+
    "\3\11\3\0\1\11\36\1\1\0\227\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEX", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 45: break;
          case 3:
            { return token(yytext(), "parentecisA", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 4:
            { return token(yytext(), "parentecisC", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 5:
            { return token(yytext(), "Signo Aritmetico", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 6:
            { return token(yytext(), "coma", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 7:
            { return token(yytext(), "numero", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 8:
            { return token(yytext(), "finlinea", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 9:
            { return token(yytext(), "operadorLogico", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 10:
            { return token(yytext(), "asignacion", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 11:
            { return token(yytext(), "Identificadores", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 12:
            { return token(yytext(), "CorcheteA", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 13:
            { return token(yytext(), "CorcheteC", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 14:
            { return token(yytext(), "dinero", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 15:
            { return token(yytext(), "if", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 16:
            { return token(yytext(), "fin", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 17:
            { return token(yytext(), "Cadenas", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 18:
            { return token(yytext(), "tipoDato", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 19:
            { return token(yytext(), "for", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 20:
            { return token(yytext(), "variable", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 21:
            { return token(yytext(), "inicio", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 22:
            { return token(yytext(), "booleano", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 23:
            { return token(yytext(), "tiempo", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 24:
            { return token(yytext(), "pantalla", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 25:
            { return token(yytext(), "while", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 26:
            { return token(yytext(), "estado", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 27:
            { return token(yytext(), "pedido", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 28:
            { return token(yytext(), "tipo", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 29:
            { return token(yytext(), "vermenu", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 30:
            { return token(yytext(), "vermesa", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 31:
            { return token(yytext(), "rotarmenu", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 32:
            { return token(yytext(), "hDia", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 33:
            { return token(yytext(), "numeroMesa", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 34:
            { return token(yytext(), "tcomida", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 35:
            { return token(yytext(), "verofertas", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          case 36:
            { return token(yytext(), "estadomesas", yyline, yycolumn);
            }
            // fall through
          case 79: break;
          case 37:
            { return token(yytext(), "declararmenu", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 38:
            { return token(yytext(), "prepmesa", yyline, yycolumn);
            }
            // fall through
          case 81: break;
          case 39:
            { return token(yytext(), "tiempopedido", yyline, yycolumn);
            }
            // fall through
          case 82: break;
          case 40:
            { return token(yytext(), "iluminarcamino", yyline, yycolumn);
            }
            // fall through
          case 83: break;
          case 41:
            { return token(yytext(), "numasientos", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 42:
            { return token(yytext(), "realizarpedido", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 43:
            { return token(yytext(), "solicitarmesero", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
